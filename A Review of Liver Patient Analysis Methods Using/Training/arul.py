# -*- coding: utf-8 -*-
"""arul.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-GhkalFbqg9wMS2CBBEQcnRjo4siyw0k
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pickle

data = pd.read_csv('/content/indian_liver_patient.csv')

data.head()

data.tail()

data.describe()

data.isnull().any()

data.isnull().sum()

data[data['Dataset']==1]

data['Dataset'].unique()

data.isnull().sum()

data_1 = data.dropna()

data_1.isnull().sum()

plt.figure(figsize=(15,10))
plt.subplot(3,3,1)
plt.scatter(data_1['Age'], data_1['Dataset'])
plt.ylabel('Dataset')
plt.xlabel('Age')

plt.subplot(3,3,2)
plt.scatter(data_1['Gender'], data_1['Dataset'],)
plt.ylabel('Dataset')
plt.xlabel('Gender')

plt.subplot(3,3,3)
plt.scatter(data_1['Total_Bilirubin'], data_1['Dataset'],)
plt.ylabel('Dataset')
plt.xlabel('Total_Bilirubin')


plt.subplot(3,3,4)
plt.scatter(data_1['Direct_Bilirubin'], data_1['Dataset'],)
plt.ylabel('Dataset')
plt.xlabel('Direct_Bilirubin')

plt.subplot(3,3,5)
plt.scatter(data_1['Alkaline_Phosphotase'], data_1['Dataset'],)
plt.ylabel('Dataset')
plt.xlabel('Alkaline_Phosphotase')

plt.subplot(3,3,6)
plt.scatter(data_1['Alamine_Aminotransferase'], data_1['Dataset'],)
plt.ylabel('Dataset')
plt.xlabel('Alamine_Aminotransferase')


plt.subplot(3,3,7)
plt.scatter(data_1['Aspartate_Aminotransferase'], data_1['Dataset'],)
plt.ylabel('Dataset')
plt.xlabel('Aspartate_Aminotransferase')

plt.subplot(3,3,8)
plt.scatter(data_1['Total_Protiens'], data_1['Dataset'],)
plt.ylabel('Dataset')
plt.xlabel('Total_Protiens')

plt.subplot(3,3,9)
plt.scatter(data_1['Albumin_and_Globulin_Ratio'], data_1['Dataset'])
plt.ylabel('Dataset')
plt.xlabel('	Albumin_and_Globulin_Ratio')

sns.countplot(data=data_1, x = 'Dataset')
LD,NLD=data_1['Dataset'].value_counts()
print("liver disease patients:",LD)
print("Non-liver disease patients:",NLD)

sns.countplot(data=data_1, x = 'Gender', label='count')
m,f=data_1['Gender'].value_counts()
print("No of Males:",m)
print("No of Females:",f)

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
data_1['Gender'] = le.fit_transform(data_1['Gender'])
data_1.head()

x=data_1.iloc[:,0:-1]
y=data_1.iloc[:,-1]

from sklearn.model_selection import train_test_split
xtrain,xtest,ytrain,ytest=train_test_split(x,y,test_size = 0.3)

xtrain.shape

xtest.shape

from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix

from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier

svc=SVC()
RFmodel=RandomForestClassifier()
KNNmodel=KNeighborsClassifier()

from sklearn.svm import SVC
svm=SVC()

svc.fit(xtrain, ytrain)

SVCpred=svc.predict(xtest)

from sklearn.metrics import accuracy_score,confusion_matrix
SVCaccuracy=accuracy_score(SVCpred, ytest)
SVCaccuracy

SVCcm=confusion_matrix(SVCpred, ytest)
SVCcm

from sklearn.ensemble import RandomForestClassifier
RFmodel=RandomForestClassifier()

RFmodel.fit(xtrain, ytrain)

RFpred=RFmodel.predict(xtest)

RFaccuracy=accuracy_score(RFpred, ytest)
RFaccuracy

RFcm=confusion_matrix(RFpred, ytest)
RFcm

from sklearn.neighbors import KNeighborsClassifier
KNN = KNeighborsClassifier()

KNN.fit(xtrain, ytrain)

KNNpred=KNN.predict(xtest)

KNNaccuracy=accuracy_score(KNNpred, ytest)
KNNaccuracy

KNNcm=confusion_matrix(KNNpred, ytest)
KNNcm

print("Support Vector Machine Algorithm accuracy score : {value:.2f} %".format(value=SVCaccuracy*100))
print("Random Forest Algorithm accuracy score : {value:.2f} %".format(value=RFaccuracy*100))
print("K_Nearest Neighbors Algorithm accuracy score : {value:.2f} %".format(value=KNNaccuracy*100))

import pickle
pickle.dump(svm, open('liver_analysis_1.pkl','wb'))

